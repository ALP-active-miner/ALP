,752
IOUtils.applyToAll(),1004
String:BD,840
Object.notifyAll(),508
HashSet.remove(),507
MergeContext.getMergingSegments(),852
ArrayList,304
FileNotFoundException,306
String,0
SegmentInfos.createBackupSegmentInfos(),874
TestConsistentFieldNumbers.assertFalse(),580
CodecProvider,645
UNKNOWN.dir,55
ReaderPool,455
Directory[],666
UNKNOWN.length,895
SegmentInfos.write(),34
TestFieldInfos,806
SegmentInfos.replace(),379
File.<init>,192
IllegalArgumentException,363
SegmentInfo.setUseCompoundFile(),962
String:merge,426
Fieldable[],132
{SegmentReader},530
UNKNOWN.files(),240
*,71
+,56
-,309
IndexWriter.getNextExternalMerge(),496
TestIndexFileDeleter.assertEquals(),1039
TestFieldInfos.newDirectory(),805
SegmentMerger,28
TestAddIndexes,664
Paths.get(),571
TestSegmentInfo.newIndexWriterConfig(),861
doBody(),27
ReadersAndLiveDocs.getReadOnlyClone(),1011
Field.Index.TOKENIZED,113
UNKNOWN.getMergingSegments(),334
=,65
Store.NO,516
IndexWriter.getReaderFinishedListeners(),561
IndexWriter.handleOOM(),418
SegmentInfos.toString(),764
Directory.openInput(),188
SegmentReader.<cast>,755
DecimalFormat,879
IndexOutput.writeLong(),1108
FileDocument.Document(),267
SegmentInfo.getDocStoreIsCompoundFile(),425
MergeAbortedException,440
UNKNOWN.directory(),1092
FailOnNonBulkMergesInfoStream.<init>,628
Query.toString(),766
IndexFileDeleter.findDeletableFiles(),1095
MergeException,470
SegmentReader.decRef(),741
IndexWriter.setMessageID(),370
BufferedDeletes.remove(),1024
DocumentsWriter.setMaxFieldLength(),396
FieldInfos.fieldInfo(),569
TFIDFSimilarity,763
null:LAMBDA,1000
Directory,2
FieldInfos.FieldNumbers.<init>,250
Path,201
UNKNOWN.info.dir,756
int:ZoieMergePolicy.DEFAULT_NUM_LARGE_SEGMENTS,731
Hashtable,824
IndexFileDeleter.getRefCount(),705
DecimalFormatSymbols.getInstance(),942
SegmentInfos.getCurrentSegmentFileName(),354
IndexFileDeleter.checkpoint(),706
tokenStream(),127
<catch>,177
SegmentInfos.getGeneration(),681
ArrayList.<init>,165
List.add(),166
AtomicLong.<init>,1037
TestCodecSupport.assertEquals(),1090
AtomicLong,1031
IndexReader.directory(),18
SegmentReader.hasNorms(),143
UNKNOWN.core,1014
SegmentInfos.isEmpty(),847
IndexSearcher.setSimilarity(),765
IndexDeletionPolicy,687
|,77
Directory.createOutput(),1054
SegmentInfos.spliterator(),174
MergeInfo,255
TestDocumentWriter.assertEquals(),104
<throw>,52
System.nanoTime(),253
UNKNOWN.sizeInBytes(),291
DocHelper.KEYWORD_TEXT,147
UNKNOWN.getDelGen(),747
MultiSegmentReader.initialize(),826
SegmentInfoPerCommit.getDelCount(),713
UNKNOWN.nextInt(),818
IndexWriter.message(),389
DocumentsWriter.anyDeletions(),657
SegmentCommitInfo.hasFieldUpdates(),750
SegmentInfos.setSize(),43
{Directory},668
MockDirectoryWrapper,669
InfoStream.isEnabled(),837
Lock.With.<init>,25
TestFieldInfos.random(),800
SegmentMerger.hasProx(),458
SegmentMerger.add(),17
param:Map,313
DirectoryReader,546
int:IndexWriter.DEFAULT_MAX_BUFFERED_DOCS,1094
TermPositions.next(),120
IndexWriterConfig.getTermIndexInterval(),376
SegmentInfos.clear(),394
Term,112
SegmentInfos.indexOf(),442
SegmentInfo.getAttributes(),769
SegmentInfos.remove(),234
CheckIndex.close(),923
IndexWriter.createCompoundFile(),604
DocumentsWriter.getNumBufferedDeleteTerms(),949
DocumentsWriter.getNumDocsInRAM(),360
interface_Cloneable,356
LogMergePolicy.<instanceof>,498
IllegalStateException,428
DocHelper.createDocument(),910
StringBuilder,228
SegmentCommitInfo.toString(),978
IndexFileNames.segmentFileName(),1046
BufferedDeletes.checkDeleteStats(),1025
IOUtils.UTF_8,937
double:1.0,674
SegmentMerger.getDelCounts(),465
SegmentReader.<init>,210
SegmentInfo.setFiles(),254
HashSet.contains(),438
BalancedSegmentMergePolicy.findBalancedMerges(),1068
TestConsistentFieldNumbers.assertEquals(),577
UNKNOWN.reset(),607
UNKNOWN.info.maxDoc(),271
TestIndexFileDeleter,1043
UNKNOWN.info(),99
DocumentsWriter.setMaxBufferedDocs(),377
Version.LUCENE_5_5_0,193
SegmentInfos.finishCommit(),237
IndexWriterConfig.getMaxThreadStates(),393
IndexWriter.doFlush(),433
SegmentInfoAndLevel.<init>,343
IndexReader,6
SegmentMerger.merge(),20
IndexWriter.applyDeletes(),423
double:1024.0,853
Collections.sort(),702
InfoStream.getDefault(),247
TestIndexFileDeleter.newMockDirectory(),1048
UNKNOWN.write(),263
Term.<init>,115
Iterable.iterator(),233
Integer.toString(),432
ZoieMergePolicy.size(),726
double.<cast>,736
MergeInfo.<init>,257
SegmentReader.doDelete(),504
StoredFieldsReader,573
Document.getFields(),135
NoMergePolicy.INSTANCE,621
SegmentInfos.lastElement(),1018
UNKNOWN.fieldInfo(),140
String:,348
byte,510
IndexWriter.decrefMergeSegments(),505
IndexWriterConfig.getCodec(),868
CommitPoint.<init>,694
OutOfMemoryError,413
SegmentInfos.getFormat(),654
IndexWriter.noDupDirs(),414
Arrays.equals(),1005
Bits,659
UNKNOWN.release(),745
IndexSearcher.doc(),791
String:IW,871
SegmentMerger.getDocMaps(),464
IndexWriterConfig.getMaxFieldLength(),380
SolrConfig,1002
IndexReader.deleteDocument(),277
BufferedUpdatesStream,836
ZoieMergePolicy.findMerges(),1072
UNKNOWN.close(),541
BufferedDeletes,87
IndexWriterConfig.getMaxBufferedDeleteTerms(),366
int:SegmentInfos.FORMAT_LOCKLESS,1109
Boolean.toString(),434
UNKNOWN.subList(),714
BufferedDeletes.applyDeletes(),1029
SolrConfig.get(),995
SolrCore.getSearcher(),1093
PrintWriter.format(),231
DocumentsWriter.setRAMBufferSizeMB(),381
TestSizeBoundedForceMerge.assertFalse(),289
Lock,51
DocumentsWriter.hasDeletes(),84
IndexableField,784
param:SegmentInfos.info(),880
IOUtils.closeWhileHandlingException(),759
param:SegmentReader,452
SegmentReader.get(),88
List.<cast>,685
MergePolicy.MergeAbortedException.<init>,490
DocumentsWriter.abort(),968
WhitespaceTokenizer.<init>,131
SegmentInfo.setDocStoreIsCompoundFile(),963
DirectoryReader.initialize(),539
String[],152
Format.format(),877
DirectoryReader.open(),676
IndexWriterConfig.getRAMBufferSizeMB(),369
Random,816
List.size(),164
UNKNOWN.getDelFileName(),480
UNKNOWN.nextBoolean(),582
Sort,216
IndexWriterConfig.<cast>,385
StringBuffer.<init>,976
Object(),834
IndexWriter.resolveExternalSegments(),409
SegmentReader[].arrayset(),532
IndexSearcher.explain(),792
UNKNOWN.isTermVectorStored(),134
PrintStream.print(),24
IndexWriterConfig.<init>,675
IndexWriter.deletePartialSegmentsFile(),958
CompoundFileWriter,967
UNKNOWN.getDocStoreIsCompoundFile(),456
int:Integer.MAX_VALUE,1008
File,191
IndexObjectsFactory.getFSSegmentInfos(),1082
OneMerge.checkAborted(),957
MultiSegmentReader.maxDoc(),828
Collection.contains(),345
param:Similarity,890
char:' ',359
IndexDeletionPolicy.onCommit(),684
CodecProvider.getDefault(),540
IndexWriter.readFieldInfos(),804
IndexWriter.addMergeException(),954
TestDocumentWriter,125
SegmentInfos.addAll(),481
Number.intValue(),534
double[][].arrayget(),715
param:IndexWriter,265
Path.toAbsolutePath(),907
TestSimpleTextCodec.add(),984
IndexFileDeleter.incRef(),691
Directory.openChecksumInput(),184
MergePolicy.setNoCFSRatio(),673
ConcurrentMergeScheduler.<init>,951
IndexWriter.incRefDeleter(),746
Utils.getDocLen(),639
ReaderPool.newPendingDeletes(),1116
SegmentInfos.getSegmentsFileName(),179
MockDirectoryWrapper.close(),670
IndexFileNameFilter.getFilter(),701
UNKNOWN.decRef(),545
AssertionError.<init>,97
TermPositions.seek(),160
param:SegmentInfos.size(),883
float[].arrayset(),1103
IndexWriter,32
Object.toString(),224
IndexWriter.doWait(),488
UNKNOWN,9
<break>,73
param:StandardDirectoryReader,1117
IndexCommit.getSegmentsFileName(),367
Explanation.getDetails(),773
IndexWriter.mergeSegments(),59
IndexReader.doCommit(),80
int[][],725
boolean:false,70
DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS,650
BalancedSegmentMergePolicy.getUseCompoundFile(),1075
LogByteSizeMergePolicy.findMerges(),727
TestIndexWriter.newDirectory(),922
Document,122
IndexFileDeleter.deleteFile(),479
TestConsistentFieldNumbers.assertTrue(),581
IndexFileNames.COMPOUND_FILE_STORE_EXTENSION,964
SegmentInfos.hasExternalSegments(),478
UNKNOWN.info.name,943
StoredField,624
TestFieldInfos.assertEquals(),799
long:Long.MAX_VALUE,319
MergePolicy,494
boolean[].arrayget(),535
MergePolicy.MergeSpecification.<init>,606
byte[].<cast>,831
IndexWriter.close(),121
byte[].arrayget(),637
Version.LATEST,244
Lock.release(),371
IndexWriter.commit(),522
UNKNOWN.setMergePolicy(),584
SegmentInfo.hasDeletions(),437
IndexFileNames.SEGMENTS_GEN,708
SegmentInfo.getDocStoreOffset(),422
Index.ANALYZED,514
Analyzer.<init>,129
ByteArrayOutputStream.<init>,920
interface_Iterable,355
MultiSegmentReader,821
IndexReader.<cast>,208
SegmentInfos.changed(),643
PrintStream.<init>,935
SegmentInfoPerCommit,173
IndexReader[].arrayset(),205
ChecksumIndexOutput.close(),1060
UNKNOWN.getName(),983
int:BalancedSegmentMergePolicy.DEFAULT_NUM_LARGE_SEGMENTS,1073
param:IndexDeletionPolicy,614
SegmentCommitInfo.getDocValuesGen(),798
DocHelper.NO_NORMS_KEY,144
Exception.<init>,633
TestIndexWriter.random(),939
Collections.shuffle(),817
IndexWriter.COMMIT_LOCK_TIMEOUT,211
FieldInfos.add(),653
param:IndexCommit,760
IndexableField.name(),781
SegmentInfos.readLatestCommit(),187
DecimalFormat.<init>,878
String.contains(),926
param:Directory,53
IndexWriter.optimize(),67
TestConsistentFieldNumbers,596
float:1.0F,330
UNKNOWN.size(),83
TestSegmentMerger.newIOContext(),600
SegmentInfos.read(),47
IndexReader.maxDoc(),82
StringBuffer,975
BalancedSegmentMergePolicy.findOneSegmentToExpunge(),1070
SegmentCommitInfo.hasDeletions(),220
CheckIndex,940
MergePolicy.setIndexWriter(),649
SolrIndexSearcher.getIndexReader(),1084
Map.keySet(),699
SimpleAnalyzer,156
double:Double.NaN,737
RAMDirectory.<init>,60
TestConsistentFieldNumbers.atLeast(),626
DirectoryIndexReader.<cast>,615
BalancedSegmentMergePolicy.createVarianceTable(),1077
IndexWriter.addIndexes(),597
<continue>,171
int:5,284
int:4,589
int:3,155
DocumentsWriter.remapDeletes(),468
LogMergePolicy.assertDelCount(),854
int:7,293
DocumentsWriter.setInfoStream(),399
int:2,126
CheckIndex.setInfoStream(),927
int:1,14
BufferedUpdatesStream.checkDeleteStats(),842
int:0,58
OneMerge.isAborted(),419
TestSimpleTextCodec.doc(),988
MockDirectoryWrapper.createOutput(),1045
FieldInfos.<init>,651
param:IndexReader[],66
{boolean},537
IndexWriterConfig.getMergeScheduler(),390
IndexWriter.getUseCompoundFile(),492
SegmentInfos.getOrLoadGlobalFieldNumberMap(),872
IllegalStateException.<init>,430
MergePolicy.OneMerge.<cast>,972
Collection.add(),299
TestConsistentFieldNumbers.newIndexWriterConfig(),583
IndexWriterConfig.getMaxBufferedDocs(),372
DocHelper.TEXT_FIELD_3_KEY,141
BufferedDeletes.getDeletes(),1036
IllegalArgumentException.<init>,362
Directory.clearLock(),364
SegmentCommitInfo.getDelCount(),222
long:COMMIT_LOCK_TIMEOUT,30
SegmentInfo.write(),1059
CommitPoint,686
DocumentsWriter.getNumDocs(),658
IndexFileNameFilter,700
double:Double.POSITIVE_INFINITY,677
{double},724
MergeScheduler,493
TestSegmentInfo.assertTrue(),864
IndexReader.indexExists(),404
Set.add(),463
SegmentInfos.clone(),477
FailOnNonBulkMergesInfoStream,629
SolrIndexSearcher,1086
SegmentReader.hasSeparateNorms(),61
IOContext.READ,195
SegmentInfo.files(),352
IndexFileDeleter.decRef(),680
Lucene50StoredFieldsFormat.fieldsReader(),572
UNKNOWN.norms.get(),823
LuceneTestCase.getTestClass(),911
SegmentInfo.getDiagnostics(),768
int:IndexWriter.MERGE_READ_BUFFER_SIZE,960
FieldType.setStoreTermVectors(),618
UNKNOWN.getDocCount(),859
BufferedDeletesInRAM,882
TestAddIndexes.newLogMergePolicy(),678
String: segments,326
FSDirectory.open(),199
SegmentReader[].arrayget(),533
UNKNOWN.info.getId(),929
IndexWriter.commitMerge(),956
File.toPath(),202
SegmentInfos.files(),395
IndexFileDeleter.deleteCommits(),683
HashMap.<init>,260
SegmentReader.numDocs(),555
IndexWriter.resetMergeExceptions(),485
MockAnalyzer,523
RefCounted.get(),981
TestAddIndexes.assertTrue(),671
IndexWriter.ensureContiguousMerge(),439
SegmentInfoAndLevel.level,340
DocumentsWriter.resumeAllThreads(),411
HashSet.<init>,258
Boolean,312
interface_Closeable,268
IndexWriter.optimizeMergesPending(),484
param:Query,782
double,292
SegmentReader.readFieldInfos(),616
LogMergePolicy.size(),308
Lock.obtain(),46
OpenMode.APPEND,388
AbstractStringBuilder.setLength(),217
String[].arrayget(),154
IndexWriterConfig.getIndexingChain(),384
int[].arrayset(),92
Object,682
SegmentInfos.asList(),223
IndexWriterConfig.setOpenMode(),515
UNKNOWN.getReaderTermsIndexDivisor(),1009
SegmentInfos.getNextSegmentFileName(),1055
SegmentDeletes.BYTES_PER_DEL_DOCID,1027
float[].arrayget(),1104
SegmentReader.getFieldNames(),632
InterruptedException,974
Document.<init>,123
TestIndexSplitter,912
long[].arrayset(),735
IndexWriter.deleteSegments(),38
DocumentsWriter,86
LogMergePolicy,286
ZoieMergePolicy.isMerged(),732
{byte},588
TermPositions,109
PrintWriter,238
Vector.addElement(),11
Integer.valueOf(),473
NoMergePolicy.COMPOUND_FILES,587
Directory.renameFile(),814
BufferedDeletesStream,867
System.currentTimeMillis(),881
String:seg=,350
IndexReader.FieldOption.ALL,636
Object.clone(),1065
TestIndexWriter.newIndexWriterConfig(),936
UNKNOWN.getSolrConfig(),1001
BufferedUpdatesStream.prune(),839
Throwable.initCause(),482
IndexWriter.getFieldInfos(),652
TestSegmentInfo.newLogMergePolicy(),862
IndexSplitter.split(),905
RefCounted,990
IOException.<init>,49
IndexWriterConfig,273
LogMergePolicy.isMerged(),310
DocumentsWriter.closeDocStore(),966
IndexOutput.writeInt(),1107
interface_Accountable,270
IndexReader.leaves(),767
SegmentInfo.getAttribute(),1085
Field.Store.NO,623
IndexWriterConfig.getMergePolicy(),642
PrintStream.println(),39
Codec.segmentInfoFormat(),264
IndexWriter.copyExternalSegments(),944
UNKNOWN.clear(),467
SegmentMerger.closeReaders(),19
AssertionError,524
LeafReaderContext,1112
IndexReader.getTermVector(),793
Directory.createFile(),811
Map.put(),429
Document.add(),103
OneMerge,169
:null,90
MergeSpecification.add(),170
StandardDirectoryReader.decRefWhileHandlingException(),751
param:CodecProvider,549
IndexFileDeleter.refresh(),459
SegmentInfo.sizeInBytes(),860
DocumentsWriter.pauseAllThreads(),416
MergeContext.numDeletesToMerge(),855
SegmentInfos.commit(),405
IndexWriter.getDirectory(),556
IndexWriterConfig.getWriteLockTimeout(),382
TrackingDirectoryWrapper.getCreatedFiles(),246
MergeScheduler.merge(),491
byte.<cast>,509
null:null,41
CorruptIndexException.<init>,697
OutputStream.writeInt(),809
SegmentMerger.<init>,961
IndexWriter.ReadersAndLiveDocs,1010
DocumentsWriter.files(),689
IndexFileNames.SEGMENTS,709
UNKNOWN.setHasProx(),461
ChecksumIndexOutput,1062
param:Directory.makeLock(),209
SegmentInfo.getDelFileName(),916
String:segments,815
String: (,36
TestIndexWriter,924
LuceneSubIndexInfo.<init>,300
MockDirectoryWrapper.<instanceof>,915
TestSimpleTextCodec.assertEquals(),991
WhitespaceTokenizer,130
TokenStream:TokenStream,151
UNKNOWN.getReadOnlyClone(),560
SegmentInfos.size(),8
TestIndexSplitter.assertEquals(),898
param:Document,888
param:int,35
TestSizeBoundedForceMerge,282
param:PrintStream,711
IndexWriter.forceMerge(),285
Arrays.toString(),242
Collection.size(),347
IndexWriter.segString(),450
SegmentInfos.getIndexCreatedVersionMajor(),761
Directory.close(),512
double:LogMergePolicy.LEVEL_LOG_SPAN,339
IndexWriter.testPoint(),436
StringHelper.idToString(),932
param:AtomicReader[],1015
UNKNOWN.getIndexSort(),215
LinkedList.remove(),489
StringHelper.randomId(),180
LinkedList.add(),443
Directory.list(),703
DocHelper.NO_NORMS_TEXT,138
Codec,249
IndexWriterConfig.getIndexDeletionPolicy(),406
BufferedDeletesInRAM.getNumDeletes(),885
InfoStream.message(),844
int:IndexWriter.DEFAULT_MIN_MERGE_DOCS,1078
IndexInput,186
TestIndexWriter.assertEquals(),925
Document.getValues(),789
IndexWriter.newSegmentName(),40
Store.YES,585
getPositionIncrementGap(),107
TermsEnum.next(),776
UNKNOWN.setUseCompoundFile(),953
UNKNOWN.read(),567
UNKNOWN.norms(),832
TestCodecSupport,1087
LogMergePolicy.findForcedMergesMaxNumSegments(),321
TestSizeBoundedForceMerge.assertTrue(),280
LuceneSegmentInfo,303
String:content,786
MergeSpecification.<init>,172
IndexWriter.setRollbackSegmentInfos(),387
UNKNOWN.get(),325
AtomicLong.addAndGet(),1020
ClassicSimilarity.<init>,762
Object.wait(),973
DocHelper.FIELD_2_TEXT,146
UNKNOWN.getSolrCoreState(),994
Directory.listAll(),564
IndexWriter.maybeMergeSegments(),1101
SegmentReader.getOriginalSegmentInfo(),1115
Collection.addAll(),351
TestIndexSplitter.random(),902
TestSimpleTextCodec.assertU(),979
Set,449
UNKNOWN.getId(),1006
IndexFileDeleter.deleteSegments(),1099
long[],738
Collection.toArray(),236
System.arraycopy(),829
FSDirectory,875
TestFieldInfos.assertFalse(),802
UNKNOWN.getCodec(),565
SegmentReader.getSegmentName(),758
IndexSplitter.main(),904
UNKNOWN.setInfoStream(),627
Directory.makeLock(),23
IOContext,196
double[].arrayset(),721
SegmentInfos.contains(),342
String:f2,595
String:f1,586
String:f4,598
IndexWriter.getKeepFullyDeletedSegments(),557
String:f3,593
IndexWriterConfig.getInfoStream(),870
UNKNOWN.getSimpleName(),914
param:Sort,783
TermPositions.freq(),124
TestSegmentMerger.assertFalse(),526
LogMergePolicy.verbose(),315
int[].arrayget(),93
byte[],178
SegmentInfoPerCommit.files(),1051
Throwable.addSuppressed(),1003
IndexFileNameFilter.accept(),695
StandardDirectoryReader.leaves(),1114
BalancedSegmentMergePolicy.size(),1069
AtomicLong.get(),1019
param:SegmentMerger,451
IndexSplitter,892
StandardDirectoryReader,744
Explanation,772
SegmentMerger.createCompoundFile(),518
param:File,876
TestIndexWriter.assertFalse(),921
IndexWriter.applyDeletesSelectively(),946
IndexReader.doClose(),78
double:0.0,338
List,163
StoredField.<init>,625
BalancedSegmentMergePolicy,1071
UNKNOWN.stringValue(),142
HashSet,259
LinkedList.size(),446
List.toArray(),558
param:SegmentCommitInfo,1118
SegmentReader.document(),136
LogMergePolicy.segString(),851
IndexWriter.checkNonDecreasingLevels(),1102
LinkedList,441
SegmentCommitInfo.getBufferedDeletesGen(),846
SegmentInfo.dir,1053
boolean[].arrayset(),547
MultiSegmentReader.<init>,835
Directory[].arrayset(),679
StringField,622
SegmentReader.hasDeletions(),62
TestSimpleTextCodec,999
String:IndexWriter.WRITE_LOCK_NAME,44
SegmentInfos.<cast>,474
Bits.get(),661
TokenStream,161
Math.log(),341
param:IndexWriterConfig,378
Math.min(),845
SegmentCommitInfo.getDelGen(),749
param:Directory.fileExists(),1083
TestSegmentMerger,517
BufferedDeletesInRAM.<init>,887
Field,106
LockObtainFailedException,373
SegmentInfo.getDocCount(),167
LogMergePolicy.isOptimized(),856
param:MergePolicy.OneMerge,435
int:20,296
SegmentInfo.getDelCount(),361
BytesRef,779
String:value,865
List.subList(),307
DocumentsWriter.getDocStoreSegment(),421
UNKNOWN.getFieldInfosGen(),757
BufferedDeletes.message(),1017
SegmentInfo.clone(),1067
MergeSpecification,168
UNKNOWN.getIndexWriter(),989
StringBuilder.<init>,227
IndexOutput,1111
IndexWriter.maybeMerge(),410
IndexWriter.getCurrentFieldInfos(),646
IndexWriter.merge(),497
IndexWriter.checkpoint(),457
int[][].arrayget(),723
float[],1105
UNKNOWN.reader(),796
IndexWriter.forceMergeDeletes(),630
Collection.clear(),688
SegmentInfos.set(),1097
SegmentReader.numDeletedDocs(),502
SegmentReader.termPositions(),110
UNKNOWN.docCount,57
SegmentInfo,12
int:10,1007
MergePolicy.useCompoundDocStore(),970
String:foo,1047
Token,162
Collections.singleton(),850
Iterator.next(),232
IndexWriter.commitMergedDeletes(),462
ByteArrayOutputStream.toString(),918
IndexWriter.flush(),118
String.startsWith(),704
TestIndexSplitter.newFSDirectory(),900
List.get(),335
RefCounted.decref(),993
DocHelper.FIELD_3_TEXT,139
SegmentInfoAndLevel,344
Vector,37
double:1000.,262
double:1024.,225
SegmentInfos.getUserData(),200
IndexFileDeleter.deletePendingFiles(),693
Collections.emptyMap(),182
SegmentInfo.getCodec(),771
String:id,987
SegmentReader,69
RAMDirectory,111
AtomicInteger.<init>,1038
IndexFileDeleter.message(),692
UNKNOWN.info.getUseCompoundFile(),176
IndexFileDeleter.deleteFiles(),1098
<a>,15
IndexWriterConfig.setMergePolicy(),283
UNKNOWN.getUseCompoundFile(),542
Map,181
TestConsistentFieldNumbers.random(),619
StandardDirectoryReader.<cast>,777
TestFieldInfos.assertNull(),803
TestSimpleTextCodec.assertQ(),992
UNKNOWN.numDeletedDocs(),858
Reader,117
ChecksumIndexOutput.writeLong(),1064
DocumentsWriter.getBufferedDeleteDocIDs(),945
SegmentInfos.readCommit(),562
SegmentInfo.getMaxSequenceID(),886
ChecksumIndexOutput.writeInt(),1057
StandardDirectoryReader.<init>,743
HashSet.add(),431
SegmentInfos.generationFromSegmentsFileName(),710
SegmentDeletes.update(),1034
SegmentInfos.getGlobalFieldNumberName(),353
Field.Store.YES,114
TestSegmentInfo.newDirectory(),866
IndexInput.readInt(),197
String:test,520
MergeState.CheckAbort.NONE,603
String.format(),218
UNKNOWN.info,190
SegmentReader.getDeletedDocs(),660
CheckIndex.setCrossCheckTermVectors(),934
UNKNOWN.getSegmentInfo(),544
param:boolean,207
IndexFileDeleter.inflateGens(),1041
SegmentInfoAndLevel.info,329
SegmentInfos.getId(),183
DirectoryReader.indexExists(),869
TestIndexWriter.assertTrue(),928
LogByteSizeMergePolicy,295
String:,,1081
TextField.<init>,602
IndexWriter.flushRamSegments(),63
String:a,527
Locale,808
String:c,519
SolrCore.getCodec(),1091
IndexFileDeleter,453
TextField.TYPE_STORED,620
ReadersAndUpdates,742
HashMap,261
TermVector.YES,599
DocumentsWriter.applyDeletes(),79
MergePolicy.setMaxCFSSegmentSizeMB(),667
OneMerge.getException(),486
String:],690
String:text,985
HashMap.put(),475
ZoieMergePolicy.findOneSegmentToExpunge(),730
OpenMode.CREATE,386
ZoieMergePolicy.findMergesToExpungeDeletes(),1076
LuceneSearchEngineStore.openDirectory(),298
TestSegmentMerger.newDirectory(),521
SegmentInfo.<cast>,917
Lucene50StoredFieldsFormat.<init>,574
IndexWriter.messageState(),383
SegmentInfos.getCommitLuceneVersion(),198
LogMergePolicy.setMaxMergeDocs(),281
IndexWriter.startTransaction(),408
SegmentInfos.getLastCommitSegmentsFileName(),570
UNKNOWN.getNextDelGen(),1050
Collection.remove(),950
int:SegmentInfos.CURRENT_FORMAT,1061
IndexWriter.commitTransaction(),412
Terms,788
UNKNOWN.getCore(),980
DocHelper.setupDoc(),149
Analyzer:Analyzer,128
{String},903
boolean:true,54
Iterator.hasNext(),241
Object.<init>,4
String: vs,471
OutputStream.writeString(),810
Collection,333
Throwable,487
String: to,327
SegmentCommitInfo.getFieldInfosGen(),754
Path.toString(),906
DirectoryIndexReader,610
BufferedDeletes.clear(),81
LogByteSizeMergePolicy.<init>,294
LogMergePolicy.findForcedMergesSizeLimit(),322
String:",391
ZoieMergePolicy.findBalancedMerges(),728
SegmentInfos.getMinSegmentLuceneVersion(),780
SimpleAnalyzer.<init>,157
IndexWriter.setSimilarity(),889
SegmentCommitInfo.sizeInBytes(),229
IndexDeletionPolicy.onInit(),698
DocumentsWriter.getBufferedDeleteTerms(),948
UNKNOWN.hasDeletions(),278
String:,31
Codec.getDefault(),185
String.<cast>,640
interface_TwoPhaseCommit,269
MockDirectoryWrapper.setAssertNoUnrefencedFilesOnClose(),909
Vector.<init>,29
int:IndexWriter.DEFAULT_MAX_MERGE_DOCS,1079
String: inclusive,324
UNKNOWN.delGen(),841
IndexWriterConfig.clone(),374
DocHelper.FIELD_1_TEXT,145
SegmentInfo.toString(),357
SegmentDeletes.any(),1021
SegmentReader.close(),559
{long},739
Field.<init>,576
SegmentInfos.removeAllElements(),1096
FieldType,617
String:1,986
MockDirectoryWrapper.setEnableVirusScanner(),672
Explanation.getDescription(),790
Arrays.asList(),1040
param:String,266
String:),317
SegmentInfos.FindSegmentsFile,608
IndexWriter.rollbackTransaction(),415
RefCount.<cast>,707
UNKNOWN.norms,827
String:.,955
BufferedDeletes.<init>,91
BalancedSegmentMergePolicy.isOptimized(),1074
TestSizeBoundedForceMerge.addDocs(),276
OutputStream,812
Analyzer,102
IndexWriterConfig.getCodecProvider(),644
OutputStream.close(),813
param:SegmentReader[],548
param:Collection,550
FieldInfos.iterator(),801
TestAddIndexes.assertEquals(),665
TestSegmentInfo,863
IndexableField.stringValue(),778
TestFieldInfos.newIndexWriterConfig(),807
Directory.deleteFile(),1058
SegmentInfos.info(),22
float:0.0f,638
SegmentReader.incRef(),551
AtomicInteger,1028
FieldNumbers,251
IndexWriterConfig.getMergedSegmentWarmer(),397
IndexReader.numDocs(),287
CheckIndex.Status,930
DirectoryReader.leaves(),899
param:MergePolicy.MergeContext,848
SegmentInfos.addElement(),16
Object[],239
IndexWriter.numDeletedDocs(),323
StringHelper.ID_LENGTH,938
TestSimpleTextCodec.commit(),982
SegmentInfos.subList(),466
SegmentInfos,10
SegmentInfos.FindSegmentsFile.run(),609
TestIndexSplitter.createTempDir(),908
next(),150
double[].arrayget(),719
SegmentInfo.equals(),100
int:500,105
Logger,219
IndexWriter.pushMaxBufferedDocs(),375
long,72
LogByteSizeMergePolicy.setMaxMergeMBForForcedMerge(),290
TestDocumentWriter.assertTrue(),119
TermsEnum,770
Set.contains(),662
UNKNOWN.setDocStoreIsCompoundFile(),454
DocumentsWriter.updateFlushedDocCount(),417
UNKNOWN.reopenSegment(),536
ConcurrentHashMap,553
Map.get(),314
DecimalFormatSymbols,941
int[],95
IOException,50
TermVector.NO,153
double:1.0d,733
UNKNOWN.decodeNormValue(),641
UNKNOWN.withSearcher(),997
IndexReader[],203
IndexFileNames.OLD_SEGMENTS_GEN,194
IndexWriterConfig.getIndexCommit(),400
UNKNOWN.arrayget(),503
FieldInfo,566
TestConsistentFieldNumbers.newDirectory(),594
SegmentCommitInfo,221
DocumentsWriter.clearBufferedDeletes(),947
UNKNOWN.incRef(),1012
UNKNOWN.append(),213
BufferedUpdatesStream.any(),838
SegmentCommitInfo.files(),977
WhitespaceAnalyzer.<init>,148
Integer.<init>,833
IndexSplitter.<init>,893
Similarity.getDefault(),116
TestSegmentMerger.newIndexWriterConfig(),525
StandardDirectoryReader.getSegmentInfos(),785
long:WRITE_LOCK_TIMEOUT,45
String: docs,952
Logger.info(),214
LogDocMergePolicy.<init>,275
double:Double.MAX_VALUE,718
DirectoryReader.<cast>,1016
TestSizeBoundedForceMerge.newWriterConfig(),272
this,500
IndexSearcher.search(),795
IndexWriterConfig.getAnalyzer(),365
DocumentsWriter.setMaxBufferedDeleteTerms(),368
SegmentInfos.firstElement(),1035
TestSizeBoundedForceMerge.assertEquals(),288
ZoieMergePolicy.createVarianceTable(),717
MultiReader.<init>,206
{IndexReader},204
IndexWriter.expungeDeletes(),592
UNKNOWN.run(),1
SegmentInfos.FindSegmentsFile.<init>,613
SegmentReader.getLiveDocs(),753
TermPositions.nextPosition(),108
IndexOutput.close(),1110
param:LuceneSearchEngineStore,305
TrackingDirectoryWrapper,245
int:1024,336
Fieldable[].arrayget(),137
Directory.fileExists(),579
IndexFileNames.fileNameFromGeneration(),1049
int:LogMergePolicy.DEFAULT_MAX_MERGE_DOCS,320
UNKNOWN.IncRef(),712
param:Directory[],75
Iterator,235
<nullcheck>,3
LogMergePolicy.SegmentInfoAndLevel,849
UNKNOWN.getSegmentName(),543
TestConsistentFieldNumbers.assertNull(),591
long[].arrayget(),734
UNKNOWN.fieldInfosFormat(),563
UNKNOWN.terms(),787
ByteArrayOutputStream,919
OpenMode,402
List.set(),1066
Integer,476
AtomicInteger.get(),1032
DirectoryIndexReader.setDeletionPolicy(),611
IndexWriter.registerMerge(),499
SegmentInfo.getUseCompoundFile(),819
MultiSegmentReader.hasNorms(),822
IndexFileDeleter.addPendingFile(),1100
SegmentReader.isDeleted(),501
ZoieMergePolicy,720
IndexWriter.getConfig(),998
TrackingDirectoryWrapper.clearCreatedFiles(),256
ReadersAndUpdates.getReadOnlyClone(),740
IOContext.DEFAULT,1042
CompoundFileWriter.addFile(),969
{float},1106
String:  add merge,328
LogMergePolicy.sizeBytes(),346
MergePolicy.MergeSpecification,605
param:Analyzer,891
IndexInput.readLong(),189
LinkedList.<init>,447
NoMergePolicy.NO_COMPOUND_FILES,590
OneMerge.segString(),444
DocumentsWriter.message(),89
SegmentReader.norms(),631
SegmentDeletes,1023
AtomicReader[].arrayget(),1013
IndexReader.open(),274
SegmentInfo.getMinSequenceID(),884
SegmentInfoPerCommit.toString(),1052
String::,349
param:SegmentInfos,85
ChecksumIndexOutput.writeStringStringMap(),1063
AbstractStringBuilder.append(),212
int:IndexWriter.DEFAULT_MERGE_FACTOR,1080
Object.equals(),424
FieldInfos,568
SegmentInfos.FindSegmentsFile:SegmentInfos.FindSegmentsFile,612
UNKNOWN.clone(),971
OneMerge.abort(),445
String:Index locked for write:,48
UNKNOWN.getDocStoreSegment(),448
boolean[],538
SegmentInfo.getDocStoreSegment(),420
LeafReaderContext.reader(),1113
Lock.With:Lock.With,26
FieldNumberBiMap,873
IndexWriter.deleteDocuments(),528
UNKNOWN.maxDoc(),226
Dictionary.put(),825
DirectoryReader.close(),894
LogMergePolicy.message(),318
int:100,794
<r>,13
UNKNOWN.equals(),98
LuceneSubIndexInfo,302
SegmentDeletes.clearDocIDs(),1033
IndexWriter.setDiagnostics(),427
UNKNOWN.name,472
SegmentsReader.<init>,529
MapBackedSet.<init>,554
Lucene50StoredFieldsFormat,575
TEST_VERSION_CURRENT:TEST_VERSION_CURRENT,513
param:MergeTrigger,729
Set.remove(),506
Throwable.printStackTrace(),175
UNKNOWN.getFieldInfos(),578
IndexWriterConfig.getReaderPooling(),647
param:List,230
<return>,42
IndexReader[].arrayget(),68
IndexCommit,398
SegmentReader[],531
IndexCommit.getDirectory(),403
SegmentInfos.range(),495
SegmentInfos.add(),248
FieldInfos.size(),655
IndexWriterConfig.getSimilarity(),392
int:50,897
SegmentInfos.prepareCommit(),243
TestAddIndexes.random(),663
IndexFileNames.COMPOUND_FILE_EXTENSION,959
AtomicInteger.addAndGet(),1026
SegmentInfo.addFiles(),252
CheckIndex.checkIndex(),931
float.<cast>,337
Token.<init>,159
Appendable.append(),358
param:IndexWriter.ReaderPool,1022
SegmentInfos.getVersion(),297
Integer.<cast>,830
IndexWriter.COMMIT_LOCK_NAME,5
float,332
SegmentReader.maxDoc(),635
ScoreDoc,797
int:LogMergePolicy.DEFAULT_MERGE_FACTOR,311
SegmentInfos.<init>,74
TextField,601
SegmentReader.getSegmentInfo(),748
SegmentReader.reopenSegment(),820
{int},96
TestSimpleTextCodec.req(),996
ChecksumIndexOutput.prepareCommit(),1056
CorruptIndexException,696
Terms.iterator(),774
IndexWriter.ensureOpen(),407
IndexWriter.getReader(),901
Lucene50StoredFieldsFormat.MODE_KEY,1088
param:SolrCore,1089
UNKNOWN.segString(),331
param:Set,857
MockDirectoryWrapper.<cast>,913
IndexSearcher,775
ReaderPool.clear(),460
TestDocumentWriter.assertFalse(),133
SegmentDeletes.<init>,1030
param:int[],94
LogMergePolicy.sizeDocs(),316
MergePolicy.OneMerge,483
BufferedDeletes.any(),656
IndexReader.close(),279
DirectoryReader.maxDoc(),896
IndexWriterConfig.getOpenMode(),401
ConcurrentHashMap.<init>,552
IndexWriter.addDocument(),101
CompoundFileWriter.close(),965
PrintStream,7
ReaderPool.<init>,469
SegmentReader.usesCompoundFile(),64
Directory[].arrayget(),76
MockDirectoryWrapper.listAll(),1044
int,21
Exception,634
InfoStream,843
boolean,33
double[],722
TokenStream.<init>,158
LuceneSegmentInfo.<init>,301
double[][],716
BufferedDeletes.setInfoStream(),648
TestIndexWriter.assertNotNull(),933
IndexReader.setNorm(),511
