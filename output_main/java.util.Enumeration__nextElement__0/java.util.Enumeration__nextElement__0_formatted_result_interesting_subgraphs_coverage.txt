#const n=3.
#const s=33.
graph(109).
graph(111).
graph(265).
graph(339).
graph(349).
graph(359).
graph(462).
graph(463).
graph(465).
graph(491).
graph(493).
graph(564).
graph(878).
graph(1109).
graph(1126).
graph(1163).
graph(1196).
graph(1252).
graph(1415).
graph(1688).
graph(1862).
graph(1946).
graph(1947).
graph(2542).
graph(2605).
graph(2652).
graph(2985).
graph(3058).
graph(3312).
graph(3375).
subgraph(1988).
subgraph(1989).
subgraph(2045).
subgraph(2368).
subgraph(2370).
subgraph(6016).
subgraph(6017).
subgraph(6383).
subgraph(6444).
subgraph(6544).
subgraph(6684).
subgraph(7829).
subgraph(10014).
subgraph(10015).
covers(1126,1988).
covers(109,1988).
covers(111,1988).
covers(1163,1988).
covers(349,1988).
covers(359,1988).
covers(1415,1988).
covers(491,1988).
covers(493,1988).
covers(1126,6444).
covers(109,6444).
covers(111,6444).
covers(1163,6444).
covers(349,6444).
covers(359,6444).
covers(1415,6444).
covers(491,6444).
covers(493,6444).
covers(1126,6383).
covers(109,6383).
covers(111,6383).
covers(1163,6383).
covers(349,6383).
covers(359,6383).
covers(1415,6383).
covers(491,6383).
covers(493,6383).
covers(1126,6016).
covers(109,6016).
covers(111,6016).
covers(1163,6016).
covers(349,6016).
covers(1415,6016).
covers(1126,6017).
covers(109,6017).
covers(111,6017).
covers(1163,6017).
covers(349,6017).
covers(1415,6017).
covers(1126,2370).
covers(109,2370).
covers(111,2370).
covers(1196,2370).
covers(349,2370).
covers(1415,2370).
covers(2605,6544).
covers(564,6544).
covers(1109,6544).
covers(359,6544).
covers(1688,7829).
covers(2652,7829).
covers(878,7829).
covers(2542,7829).
covers(359,6684).
covers(2605,6684).
covers(564,6684).
covers(1109,6684).
covers(878,2045).
covers(2542,2045).
covers(1688,2045).
covers(2652,2045).
covers(3312,10014).
covers(1109,10014).
covers(1946,10014).
covers(2605,10014).
covers(359,2368).
covers(491,2368).
covers(3058,2368).
covers(2605,1989).
covers(564,1989).
covers(1109,1989).
covers(2605,10015).
covers(3312,10015).
covers(1109,10015).
{ selected(G) : graph(G) } <= 1 :- graph(G).
sufficiently_covered(SG) :- #count { G : selected(G), covers(G, SG), graph(G) } >= n, subgraph(SG).
:- { selected(G)} > s .
covered_count(X) :- X = #count {SG : sufficiently_covered(SG), subgraph(SG)}.
#maximize {X : covered_count(X) }.
#show selected/1.
#show covered_count/1.
